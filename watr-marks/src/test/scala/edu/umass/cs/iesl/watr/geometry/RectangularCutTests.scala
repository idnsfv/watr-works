package edu.umass.cs.iesl.watr
package geometry

import org.scalatest._


class RectangularCutTests  extends FlatSpec with Matchers {
  behavior of "Geometric Figures"

  import GeometryImplicits._
  import GeometryTestUtils._
  import utils.{RelativeDirection => Dir}
  import textboxing.{TextBoxing => TB}, TB._
  import utils.ExactFloats._

  val graphSize = LTBounds.Ints(0, 0, 14, 14)

  it should "burst overlapping regions into all contiguous rectangles" in {

    List(
      (LTBounds.Ints(2, 2, 4, 1), LTBounds.Ints(2, 2, 4, 1), {
        """|┌─────────────┐
           |│░░░░░░░░░░░░░│
           |│░┏━━━┓░░░░░░░│
           |│░┗━━━┛░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░│
           |└─────────────┘
           |""".stripMargin
      }),
      (LTBounds.Ints(1, 3, 4, 1), LTBounds.Ints(2, 2, 4, 4), {
        """|┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░┌───┐░░░░░░░││░┌───┐░░░░░░░││░┏━━┓┐░░░░░░░││░┌───┐░░░░░░░││░┌──┏┓░░░░░░░││░┌───┐░░░░░░░││░┌───┐░░░░░░░│
           |│╔┏━━┓│░░░░░░░││┏┓══╗│░░░░░░░││╔┗━━┛│░░░░░░░││╔│══╗│░░░░░░░││╔│══┗┛░░░░░░░││╔│══┏┓░░░░░░░││╔│══╗│░░░░░░░│
           |│╚┗━━┛│░░░░░░░││┗┛══╝│░░░░░░░││╚│══╝│░░░░░░░││╚┏━━┓│░░░░░░░││╚│══╝│░░░░░░░││╚│══┗┛░░░░░░░││╚│══┏┓░░░░░░░│
           |│░│░░░│░░░░░░░││░│░░░│░░░░░░░││░│░░░│░░░░░░░││░┃░░┃│░░░░░░░││░│░░░│░░░░░░░││░│░░░│░░░░░░░││░│░░┃┃░░░░░░░│
           |│░└───┘░░░░░░░││░└───┘░░░░░░░││░└───┘░░░░░░░││░┗━━┛┘░░░░░░░││░└───┘░░░░░░░││░└───┘░░░░░░░││░└──┗┛░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |└─────────────┘└─────────────┘└─────────────┘└─────────────┘└─────────────┘└─────────────┘└─────────────┘
           |""".stripMargin

      }),
      (LTBounds.Ints(2, 2, 4, 1), LTBounds.Ints(2, 2, 6, 1), {
        """|┌─────────────┐┌─────────────┐
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░┏━━━┓─┐░░░░░││░┌───┏━┓░░░░░│
           |│░┗━━━┛─┘░░░░░││░└───┗━┛░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |└─────────────┘└─────────────┘
           |""".stripMargin

      })
    ) foreach {case (bbox1, bbox2, expectedOutput) =>

        val burstRegions = bbox1.withinRegion(bbox2).burstAll()

        def drawAdjacencyDiagram(adjacent: LTBounds): Box = {
          val g = makeGraph(graphSize)
          drawBoxDouble(g, bbox1)
          drawBox(g, bbox2)
          drawBoxBold(g, adjacent)
          g.asMonocolorString().mbox
        }

        val adjs = burstRegions.map{ r =>
          drawAdjacencyDiagram(r)
        }

        val actualOutput = hcat(adjs)
        // println(actualOutput)
        assertExpectedText(expectedOutput, actualOutput.toString())
    }


  }



  it should "split rectangles vertically and horizontally" in {
    // val rect = LTBounds.Ints(1, 1, 10, 10)

    // val (lsplit, rsplit) = rect.splitHorizontal(10.toFloatExact())
    List(0, 3, 10).map(_.toFloatExact)
      .foreach { splitVal =>
        // println(s" l: ${lsplit}")
        // println(s" r: ${rsplit}")
      }
  }
  it should "find  adjacent regions when inner rect is not strictly within outer" in {
    val graphSize = LTBounds.Ints(0, 0, 14, 14)
    val outer = LTBounds.Ints(3, 3, 6, 6)
    val inner = LTBounds.Ints(2, 2, 4, 4)

    def drawAdjacencyDiagram(adjacent: LTBounds): Box = {
      val g = makeGraph(graphSize)
      drawBoxDouble(g, outer)
      drawBox(g, inner)
      drawBoxBold(g, adjacent)
      g.asMonocolorString().mbox
    }

    {
      val boxes = List(Dir.Left, Dir.Center, Dir.Right, Dir.Top, Dir.Bottom)
        .map{ dir =>
          (dir, inner.withinRegion(outer).adjacentRegion(dir))
        }.map{ case (d, maybAdjacent) =>
            maybAdjacent.map{ adjacent =>
              drawAdjacencyDiagram(adjacent)
            }.getOrElse { "  <empty>  ".box }
        }

      val expectedOutput = {
        """|  <empty>  ┌─────────────┐┌─────────────┐  <empty>  ┌─────────────┐
           |           │░░░░░░░░░░░░░││░░░░░░░░░░░░░│           │░░░░░░░░░░░░░│
           |           │░┌───┐░░░░░░░││░┌───┐░░░░░░░│           │░┌───┐░░░░░░░│
           |           │░│┏━━┓══╗░░░░││░│╔══┏━━┓░░░░│           │░│╔══│══╗░░░░│
           |           │░│┃░░┃░░║░░░░││░│║░░┃░░┃░░░░│           │░│║░░│░░║░░░░│
           |           │░│┃░░┃░░║░░░░││░│║░░┃░░┃░░░░│           │░│║░░│░░║░░░░│
           |           │░└┗━━┛░░║░░░░││░└───┗━━┛░░░░│           │░└┏━━┓░░║░░░░│
           |           │░░║░░░░░║░░░░││░░║░░░░░║░░░░│           │░░┃░░┃░░║░░░░│
           |           │░░║░░░░░║░░░░││░░║░░░░░║░░░░│           │░░┃░░┃░░║░░░░│
           |           │░░╚═════╝░░░░││░░╚═════╝░░░░│           │░░┗━━┛══╝░░░░│
           |           │░░░░░░░░░░░░░││░░░░░░░░░░░░░│           │░░░░░░░░░░░░░│
           |           │░░░░░░░░░░░░░││░░░░░░░░░░░░░│           │░░░░░░░░░░░░░│
           |           │░░░░░░░░░░░░░││░░░░░░░░░░░░░│           │░░░░░░░░░░░░░│
           |           │░░░░░░░░░░░░░││░░░░░░░░░░░░░│           │░░░░░░░░░░░░░│
           |           └─────────────┘└─────────────┘           └─────────────┘

           |""".stripMargin
      }
      // println(hcat(boxes))
      assertExpectedText(expectedOutput, hcat(boxes).toString())
    }
    {
      val boxes = List(
        List(Dir.Left, Dir.Center),
        List(Dir.Left, Dir.Right),
        List(Dir.Right, Dir.Center),
        List(Dir.Left, Dir.Bottom),
        List(Dir.Right, Dir.BottomRight),
        List(Dir.Right, Dir.Bottom)
      ).flatMap{ dirs =>
        inner.withinRegion(outer)
          .adjacentRegions(dirs:_*)
          .map{ adjacent => drawAdjacencyDiagram(adjacent) }
      }

      val expectedOutput = {
        """|┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░┌───┐░░░░░░░││░┌───┐░░░░░░░││░┌───┐░░░░░░░││░┌───┐░░░░░░░││░┌───┐░░░░░░░││░┌───┐░░░░░░░│
           |│░│┏━━┓══╗░░░░││░│╔══┏━━┓░░░░││░│┏━━━━━┓░░░░││░│╔══│══╗░░░░││░│╔══┏━━┓░░░░││░│┏━━━━━┓░░░░│
           |│░│┃░░┃░░║░░░░││░│║░░┃░░┃░░░░││░│┃░░│░░┃░░░░││░│║░░│░░║░░░░││░│║░░┃░░┃░░░░││░│┃░░│░░┃░░░░│
           |│░│┃░░┃░░║░░░░││░│║░░┃░░┃░░░░││░│┃░░│░░┃░░░░││░│║░░│░░║░░░░││░│║░░┃░░┃░░░░││░│┃░░│░░┃░░░░│
           |│░└┗━━┛░░║░░░░││░└───┗━━┛░░░░││░└┗━━━━━┛░░░░││░└┏━━┓░░║░░░░││░└───┃░░┃░░░░││░└┃──┘░░┃░░░░│
           |│░░║░░░░░║░░░░││░░║░░░░░║░░░░││░░║░░░░░║░░░░││░░┃░░┃░░║░░░░││░░║░░┃░░┃░░░░││░░┃░░░░░┃░░░░│
           |│░░║░░░░░║░░░░││░░║░░░░░║░░░░││░░║░░░░░║░░░░││░░┃░░┃░░║░░░░││░░║░░┃░░┃░░░░││░░┃░░░░░┃░░░░│
           |│░░╚═════╝░░░░││░░╚═════╝░░░░││░░╚═════╝░░░░││░░┗━━┛══╝░░░░││░░╚══┗━━┛░░░░││░░┗━━━━━┛░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |└─────────────┘└─────────────┘└─────────────┘└─────────────┘└─────────────┘└─────────────┘
           |""".stripMargin
      }

      // println(hcat(boxes))
      assertExpectedText(expectedOutput, hcat(boxes).toString())
    }
  }


  it should "find regions adjacent to rectangle within enclosing region" in {
    val graphSize = LTBounds.Ints(0, 0, 14, 14)
    val outer = LTBounds.Ints(1, 1, 10, 10)
    val inner = LTBounds.Ints(3, 4, 5, 2)

    def drawAdjacencyDiagram(adjacent: LTBounds): Box = {
      // println(s"drawAdjacencyDiagram")
      // println(s"   graph: ${graphSize}")
      // println(s"   inner: ${inner}")
      // println(s"   outer: ${outer}")
      // println(s"   adjacent: ${adjacent}")
      val g = makeGraph(graphSize)
      drawBoxDouble(g, outer)
      drawBox(g, inner)
      drawBoxBold(g, adjacent)
      g.asMonocolorString().mbox
    }

    {
      val boxes = List(Dir.Left, Dir.Center, Dir.Right, Dir.Top, Dir.Bottom)
        .flatMap{ dir =>
          inner.withinRegion(outer)
            .adjacentRegion(dir)
            .map{ adjacent => drawAdjacencyDiagram(adjacent) }
        }

      val expectedOutput = {
        """|┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐
           |│╔═════════╗░░││╔═════════╗░░││╔═════════╗░░││╔═┏━━━━┓══╗░░││╔═════════╗░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░┃░░░░┃░░║░░││║░░░░░░░░░║░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░┃░░░░┃░░║░░││║░░░░░░░░░║░░│
           |│┏━┓────┐░░║░░││║░┏━━━━┓░░║░░││║░┌────┏━━┓░░││║░┗━━━━┛░░║░░││║░┌────┐░░║░░│
           |│┃░┃░░░░│░░║░░││║░┃░░░░┃░░║░░││║░│░░░░┃░░┃░░││║░│░░░░│░░║░░││║░│░░░░│░░║░░│
           |│┗━┛────┘░░║░░││║░┗━━━━┛░░║░░││║░└────┗━━┛░░││║░└────┘░░║░░││║░┏━━━━┓░░║░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░┃░░░░┃░░║░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░┃░░░░┃░░║░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░┃░░░░┃░░║░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░┃░░░░┃░░║░░│
           |│╚═════════╝░░││╚═════════╝░░││╚═════════╝░░││╚═════════╝░░││╚═┗━━━━┛══╝░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |└─────────────┘└─────────────┘└─────────────┘└─────────────┘└─────────────┘
           |""".stripMargin
      }
      // println(hcat(boxes))
      assertExpectedText(expectedOutput, hcat(boxes).toString())
    }


    {
      val boxes = List(Dir.TopLeft, Dir.TopRight, Dir.BottomLeft, Dir.BottomRight)
        .flatMap{ dir =>
          inner.withinRegion(outer)
            .adjacentRegion(dir)
            .map{ adjacent => drawAdjacencyDiagram(adjacent) }
        }

      val expectedOutput = {
        """|┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐
           |│┏━┓═══════╗░░││╔══════┏━━┓░░││╔═════════╗░░││╔═════════╗░░│
           |│┃░┃░░░░░░░║░░││║░░░░░░┃░░┃░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░│
           |│┃░┃░░░░░░░║░░││║░░░░░░┃░░┃░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░│
           |│┗━┛────┐░░║░░││║░┌────┗━━┛░░││║░┌────┐░░║░░││║░┌────┐░░║░░│
           |│║░│░░░░│░░║░░││║░│░░░░│░░║░░││║░│░░░░│░░║░░││║░│░░░░│░░║░░│
           |│║░└────┘░░║░░││║░└────┘░░║░░││┏━┓────┘░░║░░││║░└────┏━━┓░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││┃░┃░░░░░░░║░░││║░░░░░░┃░░┃░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││┃░┃░░░░░░░║░░││║░░░░░░┃░░┃░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││┃░┃░░░░░░░║░░││║░░░░░░┃░░┃░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││┃░┃░░░░░░░║░░││║░░░░░░┃░░┃░░│
           |│╚═════════╝░░││╚═════════╝░░││┗━┛═══════╝░░││╚══════┗━━┛░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |└─────────────┘└─────────────┘└─────────────┘└─────────────┘
           |""".stripMargin
      }

      assertExpectedText(expectedOutput, hcat(boxes).toString())
    }

    {
      val boxes = List(
        List(Dir.Left, Dir.Center),
        List(Dir.Left, Dir.Right),
        List(Dir.Right, Dir.Center),
        List(Dir.Left, Dir.Bottom),
        List(Dir.Right, Dir.BottomRight),
        List(Dir.Right, Dir.Bottom)
      ).flatMap{ dirs =>
        inner.withinRegion(outer)
          .adjacentRegions(dirs:_*)
          .map{ adjacent => drawAdjacencyDiagram(adjacent) }
      }

      val expectedOutput = {
        """|┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐┌─────────────┐
           |│╔═════════╗░░││╔═════════╗░░││╔═════════╗░░││╔═════════╗░░││╔═════════╗░░││╔═════════╗░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░│
           |│┏━━━━━━┓░░║░░││┏━━━━━━━━━┓░░││║░┏━━━━━━━┓░░││┏━━━━━━┓░░║░░││║░┌────┏━━┓░░││║░┏━━━━━━━┓░░│
           |│┃░│░░░░┃░░║░░││┃░│░░░░│░░┃░░││║░┃░░░░│░░┃░░││┃░│░░░░┃░░║░░││║░│░░░░┃░░┃░░││║░┃░░░░│░░┃░░│
           |│┗━━━━━━┛░░║░░││┗━━━━━━━━━┛░░││║░┗━━━━━━━┛░░││┃░└────┃░░║░░││║░└────┃░░┃░░││║░┃────┘░░┃░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││┃░░░░░░┃░░║░░││║░░░░░░┃░░┃░░││║░┃░░░░░░░┃░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││┃░░░░░░┃░░║░░││║░░░░░░┃░░┃░░││║░┃░░░░░░░┃░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││┃░░░░░░┃░░║░░││║░░░░░░┃░░┃░░││║░┃░░░░░░░┃░░│
           |│║░░░░░░░░░║░░││║░░░░░░░░░║░░││║░░░░░░░░░║░░││┃░░░░░░┃░░║░░││║░░░░░░┃░░┃░░││║░┃░░░░░░░┃░░│
           |│╚═════════╝░░││╚═════════╝░░││╚═════════╝░░││┗━━━━━━┛══╝░░││╚══════┗━━┛░░││╚═┗━━━━━━━┛░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |│░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░││░░░░░░░░░░░░░│
           |└─────────────┘└─────────────┘└─────────────┘└─────────────┘└─────────────┘└─────────────┘
           |""".stripMargin
      }

      assertExpectedText(expectedOutput, hcat(boxes).toString())
    }
  }
}
